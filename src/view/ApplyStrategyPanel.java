package view;/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import controller.IStockMarketController;
import model.Stock;

/**
 * @author ojaspatwardhan
 */
public class ApplyStrategyPanel extends javax.swing.JPanel {

  private IStockMarketController stockMarketController;
  private String startDate;
  private String endDate;
  private int amount;
  private int frequency;
  private List<Stock> stockList;
  private Map<String, Integer> weights;

  /**
   * Creates new form ApplyStrategyPanel
   */
  public ApplyStrategyPanel(IStockMarketController stockMarketController) {
    initComponents();
    this.stockMarketController = stockMarketController;
    this.frequency = 0;
    this.endDate = "";
    this.startDate = "";
    this.amount = 0;
    this.stockList = new ArrayList<>();
    this.weights = new HashMap<>();
  }

  /**
   * This method is called from within the constructor to initialize the form. WARNING: Do NOT
   * modify this code. The content of this method is always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    portfolioNumberLbl = new javax.swing.JLabel();
    portfolioNumberTextField = new javax.swing.JTextField();
    weightsLbl = new javax.swing.JLabel();
    weightsComoboBox = new javax.swing.JComboBox<>();
    weightsTextField = new javax.swing.JTextField();
    updateWeightBtn = new javax.swing.JButton();
    executeCustomWeightsBtn = new javax.swing.JButton();
    executeEqualWeightsBtn = new javax.swing.JButton();
    strategyLabel = new javax.swing.JLabel();
    strategyTextField = new javax.swing.JTextField();
    resultLabel = new javax.swing.JLabel();

    portfolioNumberLbl.setText("Enter portfolio number.");

    strategyLabel.setText("Enter the strategy you want to apply.");

    weightsLbl.setText("Select Weights.");

    weightsTextField.setText("Enter weight");

    updateWeightBtn.setText("Update weight");

    executeCustomWeightsBtn.setText("Execute using custom weights");

    executeEqualWeightsBtn.setText("Execute using equal weights");

    strategyTextField.addFocusListener(new FocusListener() {
      @Override
      public void focusGained(FocusEvent focusEvent) {

      }

      @Override
      public void focusLost(FocusEvent focusEvent) {
        getStrategyDetails(focusEvent);
      }
    });

    updateWeightBtn.addActionListener(new ActionListener() {
      @Override
      public void actionPerformed(ActionEvent actionEvent) {
        updateWeights(actionEvent);
      }
    });

    weightsComoboBox.addFocusListener(new FocusListener() {
      @Override
      public void focusGained(FocusEvent focusEvent) {
        resultLabel.setText("");
      }

      @Override
      public void focusLost(FocusEvent focusEvent) {

      }
    });

    executeCustomWeightsBtn.addActionListener(new ActionListener() {
      @Override
      public void actionPerformed(ActionEvent actionEvent) {
        invest(actionEvent, true);
      }
    });

    executeEqualWeightsBtn.addActionListener(new ActionListener() {
      @Override
      public void actionPerformed(ActionEvent actionEvent) {
        invest(actionEvent, false);
      }
    });

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(portfolioNumberTextField)
                    .addComponent(strategyTextField)
                    .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(portfolioNumberLbl)
                                    .addComponent(strategyLabel)
                                    .addComponent(resultLabel)
                                    .addComponent(weightsLbl))
                            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                            .addComponent(weightsComoboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(weightsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(updateWeightBtn))
                                    .addGroup(layout.createSequentialGroup()
                                            .addComponent(executeCustomWeightsBtn)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(executeEqualWeightsBtn)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(resultLabel)))
                            .addGap(0, 338, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(portfolioNumberLbl)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(portfolioNumberTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(strategyLabel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(strategyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(weightsLbl)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(weightsComoboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(weightsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(updateWeightBtn))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(executeCustomWeightsBtn)
                                    .addComponent(executeEqualWeightsBtn))
                            .addContainerGap(370, Short.MAX_VALUE))
    );
  }// </editor-fold>//GEN-END:initComponents


  private void getStrategyDetails(FocusEvent f) {
    String strategyNumber = strategyTextField.getText();
    String pNumber = portfolioNumberTextField.getText();
    try {
      int sn = Integer.parseInt(strategyNumber);
      int pn = Integer.parseInt(pNumber);
      if (sn < 0 || pn < 0) {
        resultLabel.setText("Negative numbers are not allowed");
        return;
      }
      String details[] = this.stockMarketController.getStrategyDetails(strategyNumber);
      amount = (int) Double.parseDouble(details[0]);
      startDate = details[1];
      endDate = details[2];
      frequency = Integer.parseInt(details[3]);
      stockList = this.stockMarketController.viewComposition(pn, startDate);
      for (Stock stock : stockList) {
        weightsComoboBox.addItem(stock.getTicker());
      }
    } catch (NumberFormatException e) {
      resultLabel.setText("Enter valid number.");
    }
  }

  private void updateWeights(ActionEvent actionEvent) {
    resultLabel.setText("");
    String ticker = (String) weightsComoboBox.getSelectedItem();
    String tickerWeight = weightsTextField.getText();
    int tWeight = Integer.parseInt(tickerWeight);
    if (tWeight < 0) {
      resultLabel.setText("Weight cannot be negative");
    } else {
      weights.put(ticker, tWeight);
      resultLabel.setText("Weight updated.");
    }
  }

  private void invest(ActionEvent actionEvent, boolean custom) {
    String pNumber = portfolioNumberTextField.getText();
    String date = this.startDate;
    int pn;
    double amount1 = amount;
    try {
      pn = Integer.parseInt(pNumber);
      SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
      Date date1 = dateFormat.parse(date);
      if (custom) {
        if (weights.entrySet().stream().mapToInt(Map.Entry::getValue).sum() != 100) {
          resultLabel.setText("Weights sum must be 100.");
          return;
        }
        String response;
        boolean flag = true;
        for (Map.Entry<String, Integer> entry : weights.entrySet()) {
          double investAmount = (entry.getValue() / 100.0) * amount;
          response = this.stockMarketController.buyStockByAmount(entry.getKey(), investAmount, date, pn, 0);
          if (!response.trim().equals("pass")) {
            flag = false;
          }
        }
        if (flag) {
          resultLabel.setText("Investment successful.");
        }
      } else {
        String response;
        boolean flag = true;
        for (Map.Entry<String, Integer> entry : weights.entrySet()) {
          double investAmount = (100.0 / weights.size()) * amount;
          response = this.stockMarketController.buyStockByAmount(entry.getKey(), investAmount, date, pn, 0);
          if (!response.trim().equals("pass")) {
            flag = false;
          }
        }
        if (flag) {
          resultLabel.setText("Investment successful.");
        }
      }
    } catch (NumberFormatException e) {
      resultLabel.setText("Enter a valid number for amount");
    } catch (IllegalArgumentException ie) {
      resultLabel.setText(ie.getMessage());
    } catch (ParseException pe) {
      resultLabel.setText("Enter valid date of format (yyyy-MM-dd).");
    }
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton executeCustomWeightsBtn;
  private javax.swing.JButton executeEqualWeightsBtn;
  private javax.swing.JLabel portfolioNumberLbl;
  private javax.swing.JTextField portfolioNumberTextField;
  private javax.swing.JButton updateWeightBtn;
  private javax.swing.JComboBox<String> weightsComoboBox;
  private javax.swing.JLabel weightsLbl;
  private javax.swing.JTextField weightsTextField;
  private javax.swing.JLabel strategyLabel;
  private javax.swing.JTextField strategyTextField;
  private javax.swing.JLabel resultLabel;
  // End of variables declaration//GEN-END:variables
}
