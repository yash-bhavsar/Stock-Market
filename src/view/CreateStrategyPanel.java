package view;/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import controller.IStockMarketController;
import model.Stock;

/**
 * @author ojaspatwardhan
 */
public class CreateStrategyPanel extends javax.swing.JPanel {

  private IStockMarketController stockMarketController;
  private List<Stock> stockList;
  private Map<String, Integer> weights;

  /**
   * Creates new form CreateStrategypanel
   */
  public CreateStrategyPanel(IStockMarketController stockMarketController) {
    initComponents();
    this.stockMarketController = stockMarketController;
    this.strategyEndDateLbl.setVisible(false);
    this.strategyEndDateField.setVisible(false);
    this.stockList = new ArrayList<>();
    this.weights = new HashMap<>();
  }

  /**
   * This method is called from within the constructor to initialize the form. WARNING: Do NOT
   * modify this code. The content of this method is always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    strategyPortfolioNumberLabel = new javax.swing.JLabel();
    strategyPortfolioNumberField = new javax.swing.JTextField();
    startDateLabel = new javax.swing.JLabel();
    strategyStartDateField = new javax.swing.JTextField();
    strategyEndDateLabel = new javax.swing.JLabel();
    strategyEndDateComboBox = new javax.swing.JComboBox<>();
    strategyEndDateLbl = new javax.swing.JLabel();
    strategyEndDateField = new javax.swing.JTextField();
    strategyFrequencyLabel = new javax.swing.JLabel();
    strategyFrequencyField = new javax.swing.JTextField();
    strategyAmountLabel = new javax.swing.JLabel();
    strategyAmountField = new javax.swing.JTextField();
    weightsLabel = new javax.swing.JLabel();
    tickerComboBox = new javax.swing.JComboBox<>();
    weightsTextField = new javax.swing.JTextField();
    updateWeightsBtn = new javax.swing.JButton();
    customWeightsBtn = new javax.swing.JButton();
    equalWeightsBtn = new javax.swing.JButton();
    saveStrategyBtn = new javax.swing.JButton();
    resultLbl = new javax.swing.JLabel();
    strategyNumberField = new javax.swing.JTextField();
    strategyNumberLabel = new javax.swing.JLabel();

    strategyStartDateField.addFocusListener(new FocusListener() {
      @Override
      public void focusGained(FocusEvent focusEvent) {

      }

      @Override
      public void focusLost(FocusEvent focusEvent) {
        getStocks(focusEvent);
      }
    });

    strategyPortfolioNumberLabel.setText("Please enter the portfolio number.");

    strategyNumberLabel.setText("Enter strategy number.");

    startDateLabel.setText("Please enter the start date (yyyy-mm-dd).");

    strategyEndDateLabel.setText("Would you like to enter the end date.");

    strategyEndDateComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[]{"No", "Yes"}));

    strategyEndDateLbl.setText("Please enter the end date.");

    strategyFrequencyLabel.setText("Please enter the frequency (in days).");

    strategyAmountLabel.setText("Please enter the amount you would like to invest ($).");

    weightsLabel.setText("Select weights");

    tickerComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[]{"Item 1", "Item 2", "Item 3", "Item 4"}));

    weightsTextField.setText("Enter weight");

    updateWeightsBtn.setText("Update weight");

    customWeightsBtn.setText("Execute using custom weights");

    equalWeightsBtn.setText("Execute using equal weights");

    saveStrategyBtn.setText("Save Strategy");

    strategyEndDateComboBox.addActionListener(new ActionListener() {
      @Override
      public void actionPerformed(ActionEvent actionEvent) {
        if (strategyEndDateComboBox.getSelectedIndex() == 1) {
          strategyEndDateField.setVisible(true);
          strategyEndDateLbl.setVisible(true);
        } else if (strategyEndDateComboBox.getSelectedIndex() == 0) {
          strategyEndDateField.setVisible(false);
          strategyEndDateLbl.setVisible(false);
        }
      }
    });

    updateWeightsBtn.addActionListener(new ActionListener() {
      @Override
      public void actionPerformed(ActionEvent actionEvent) {
        updateWeights(actionEvent);
      }
    });

    tickerComboBox.addFocusListener(new FocusListener() {
      @Override
      public void focusGained(FocusEvent focusEvent) {
        resultLbl.setText("");
      }

      @Override
      public void focusLost(FocusEvent focusEvent) {

      }
    });

    customWeightsBtn.addActionListener(new ActionListener() {
      @Override
      public void actionPerformed(ActionEvent actionEvent) {
        executeStrategy(actionEvent, true);
      }
    });

    equalWeightsBtn.addActionListener(new ActionListener() {
      @Override
      public void actionPerformed(ActionEvent actionEvent) {
        executeStrategy(actionEvent, false);
      }
    });

    saveStrategyBtn.addActionListener(new ActionListener() {
      @Override
      public void actionPerformed(ActionEvent actionEvent) {
        saveStrategy(actionEvent);
      }
    });

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(strategyAmountField)
                    .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(strategyPortfolioNumberField)
                                    .addComponent(strategyNumberField)
                                    .addComponent(strategyStartDateField)
                                    .addComponent(strategyEndDateComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(strategyEndDateField)
                                    .addComponent(strategyFrequencyField)
                                    .addGroup(layout.createSequentialGroup()
                                            .addContainerGap()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(strategyPortfolioNumberLabel)
                                                    .addComponent(strategyNumberLabel)
                                                    .addComponent(startDateLabel)
                                                    .addComponent(strategyEndDateLabel)
                                                    .addComponent(strategyEndDateLbl)
                                                    .addComponent(strategyFrequencyLabel)
                                                    .addComponent(strategyAmountLabel)
                                                    .addComponent(weightsLabel)
                                                    .addGroup(layout.createSequentialGroup()
                                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                    .addGroup(layout.createSequentialGroup()
                                                                            .addComponent(tickerComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                            .addComponent(weightsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                    .addComponent(customWeightsBtn))
                                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                    .addComponent(equalWeightsBtn)
                                                                    .addComponent(updateWeightsBtn))))
                                            .addGap(0, 319, Short.MAX_VALUE))
                                    .addComponent(saveStrategyBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(resultLbl)
                            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(strategyPortfolioNumberLabel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(strategyPortfolioNumberField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(strategyNumberLabel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(strategyNumberField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(startDateLabel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(strategyStartDateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(strategyEndDateLabel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(strategyEndDateComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(strategyEndDateLbl)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(strategyEndDateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(strategyFrequencyLabel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(strategyFrequencyField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(strategyAmountLabel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(strategyAmountField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(weightsLabel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(tickerComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(weightsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(updateWeightsBtn))
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(customWeightsBtn)
                                    .addComponent(equalWeightsBtn))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(saveStrategyBtn)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(resultLbl)
                            .addContainerGap(21, Short.MAX_VALUE))
    );
  }// </editor-fold>//GEN-END:initComponents

  private void getStocks(FocusEvent l) {
    tickerComboBox.removeAllItems();
    String pNumber = strategyPortfolioNumberField.getText();
    String date = strategyStartDateField.getText();
    try {
      int pn = Integer.parseInt(pNumber);
      SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
      Date date1 = dateFormat.parse(date);
      if (pn < 0) {
        this.resultLbl.setText("Portfolio number cannot be negative");
        return;
      } else if (date1.after(new Date())) {
        this.resultLbl.setText("Future dates are not allowed.");
        return;
      }
      stockList = this.stockMarketController.viewComposition(pn, date);
      for (Stock stock : stockList) {
        tickerComboBox.addItem(stock.getTicker());
      }
    } catch (NumberFormatException ne) {
      resultLbl.setText("Enter a valid portfolio number.");
    } catch (ParseException e) {
      resultLbl.setText("Enter valid date of format (yyyy-MM-dd).");
    }
  }

  private void updateWeights(ActionEvent actionEvent) {
    String ticker = (String) tickerComboBox.getSelectedItem();
    String tickerWeight = weightsTextField.getText();
    int tWeight = Integer.parseInt(tickerWeight);
    if (tWeight < 0) {
      resultLbl.setText("Weight cannot be negative");
    } else {
      weights.put(ticker, tWeight);
      resultLbl.setText("Weight updated.");
    }
  }

  private void executeStrategy(ActionEvent actionEvent, boolean custom) {
    String pNumber = strategyPortfolioNumberField.getText();
    String startDate = strategyStartDateField.getText();
    String investmentAmount = strategyAmountField.getText();
    String frequency = strategyFrequencyField.getText();
    SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
    String endDate;
    if (strategyEndDateComboBox.getSelectedIndex() == 1) {
      endDate = strategyEndDateField.getText();
    } else {
      endDate = dateFormat.format(new Date());
    }
    double amount;
    try {
      int pn = Integer.parseInt(pNumber);
      int freqNumber = Integer.parseInt(frequency);
      amount = Double.parseDouble(investmentAmount);
      Date sdate = dateFormat.parse(startDate);
      Date edate = dateFormat.parse(endDate);
      if (freqNumber < 0) {
        resultLbl.setText("Frequency cannot be negative.");
        return;
      } else if (sdate.after(edate)) {
        resultLbl.setText("Start date cannot be after end date.");
        return;
      }
      if (custom) {
        if (weights.entrySet().stream().mapToInt(Map.Entry::getValue).sum() != 100) {
          resultLbl.setText("Weights sum must be 100.");
          return;
        }
        String response;
        boolean flag = true;
        for (Map.Entry<String, Integer> entry : weights.entrySet()) {
          double investAmount = (entry.getValue() / 100.0) * amount;
          response = this.stockMarketController.executeStrategy(entry.getKey(), investAmount, startDate, endDate, pn, freqNumber);
          if (!response.trim().equals("pass")) {
            flag = false;
          }
        }
        if (flag) {
          resultLbl.setText("Strategy execution successful.");
        }
      } else {
        String response;
        boolean flag = true;
        for (Map.Entry<String, Integer> entry : weights.entrySet()) {
          double investAmount = (100.0 / weights.size()) * amount;
          response = this.stockMarketController.executeStrategy(entry.getKey(), investAmount, startDate, endDate, pn, freqNumber);
          if (!response.trim().equals("pass")) {
            flag = false;
          }
        }
        if (flag) {
          resultLbl.setText("Strategy execution successful.");
        }
      }
    } catch (NumberFormatException e) {
      resultLbl.setText("Enter a valid number for amount");
    } catch (IllegalArgumentException ie) {
      resultLbl.setText(ie.getMessage());
    } catch (ParseException pe) {
      resultLbl.setText("Enter valid date of format (yyyy-MM-dd).");
    }
  }

  private void saveStrategy(ActionEvent actionEvent) {
    String strategyNumber = strategyNumberField.getText();
    String startDate = strategyStartDateField.getText();
    String investmentAmount = strategyAmountField.getText();
    String frequency = strategyFrequencyField.getText();
    SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
    String endDate;
    if (strategyEndDateComboBox.getSelectedIndex() == 1) {
      endDate = strategyEndDateField.getText();
    } else {
      endDate = dateFormat.format(new Date());
    }
    double amount;
    try {
      int sn = Integer.parseInt(strategyNumber);
      int freqNumber = Integer.parseInt(frequency);
      amount = Double.parseDouble(investmentAmount);
      Date sdate = dateFormat.parse(startDate);
      Date edate = dateFormat.parse(endDate);
      if (sn < 0) {
        resultLbl.setText("Strategy number cannot be negative");
        return;
      } else if (freqNumber < 0) {
        resultLbl.setText("Frequency cannot be negative.");
        return;
      } else if (sdate.after(edate)) {
        resultLbl.setText("Start date cannot be after end date.");
        return;
      } else if (amount < 0) {
        resultLbl.setText("Amount cannot be negative");
        return;
      }

      String response = this.stockMarketController.saveStrategy(strategyNumber, amount, startDate, endDate, freqNumber);
      if (response.equals("pass")) {
        resultLbl.setText("Strategy saved.");
      }
    } catch (NumberFormatException ne) {
      resultLbl.setText("Enter a valid number.");
    } catch (IllegalArgumentException ie) {
      resultLbl.setText(ie.getMessage());
    } catch (ParseException pe) {
      resultLbl.setText("Enter valid date of format (yyyy-MM-dd).");
    }
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton customWeightsBtn;
  private javax.swing.JButton equalWeightsBtn;
  private javax.swing.JLabel startDateLabel;
  private javax.swing.JLabel resultLbl;
  private javax.swing.JButton saveStrategyBtn;
  private javax.swing.JTextField strategyAmountField;
  private javax.swing.JLabel strategyAmountLabel;
  private javax.swing.JComboBox<String> strategyEndDateComboBox;
  private javax.swing.JTextField strategyEndDateField;
  private javax.swing.JLabel strategyEndDateLabel;
  private javax.swing.JLabel strategyEndDateLbl;
  private javax.swing.JTextField strategyFrequencyField;
  private javax.swing.JLabel strategyFrequencyLabel;
  private javax.swing.JTextField strategyPortfolioNumberField;
  private javax.swing.JLabel strategyPortfolioNumberLabel;
  private javax.swing.JTextField strategyStartDateField;
  private javax.swing.JComboBox<String> tickerComboBox;
  private javax.swing.JButton updateWeightsBtn;
  private javax.swing.JLabel weightsLabel;
  private javax.swing.JTextField weightsTextField;
  private javax.swing.JLabel strategyNumberLabel;
  private javax.swing.JTextField strategyNumberField;
  // End of variables declaration//GEN-END:variables
}
